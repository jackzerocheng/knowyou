<?php
/**
 * Message:
 * User: jzc
 * Date: 2018/10/22
 * Time: 3:31 PM
 * Return:
 */

namespace common\models;

use yii\base\Model;
use common\dao\Article;
use Yii;

class ArticleModel extends Model
{
    //文章状态
    const ARTICLE_STATUS_UNVERIFIED = 1;//待审核
    const ARTICLE_STATUS_NORMAL = 2;//正常
    const ARTICLE_STATUS_PRIVATE = 3;//隐私
    const ARTICLE_STATUS_UNCOMMENT = 4;//无法评论
    const ARTICLE_STATUS_DELETED = 5;//删除
    const ARTICLE_STATUS_NOT_PASS = 6;//审核未通过
    public $articleStatusMap = [
        self::ARTICLE_STATUS_UNVERIFIED => '待审核',
        self::ARTICLE_STATUS_NORMAL => '正常',
        self::ARTICLE_STATUS_PRIVATE => '隐私',
        self::ARTICLE_STATUS_UNCOMMENT => '无法评论',
        self::ARTICLE_STATUS_DELETED => '删除',
        self::ARTICLE_STATUS_NOT_PASS => '审核未通过'
    ];

    const REDIS_ARTICLE_READ_NUMBER = 'know_you_article_read_number_';//文章阅读数 hash 有效期三天
    const REDIS_EXPIRE_TIME = 259200;//三天
    const BASE_ARTICLE_ID_KEY = 'BASE_ARTICLE_ID';//id = base_id * partition + uid % partition
    const REDIS_ARTICLE_UPDATE_SET = 'article_update_set_';//文章更新热度 - 点赞 评论 新发布文章 操作更新该值
    const ARTICLE_COVER_DEFAULT = 'http://data.jianmo.top/img/default/default_cover.png';//文章默认封面
    const TABLE_PARTITION = 4;
    const REDIS_ARTICLE_NUMBER = 'know_you_article_number';//文章计数 - 定时任务


    public function rules()
    {
        return parent::rules(); // TODO: Change the autogenerated stub
    }

    /**
     * ID批量查询
     * @param array $ids
     * @param bool $asc
     * @return array
     */
    public function getListByIds(array $ids, $asc = false)
    {
        if (empty($ids)) {
            return [];
        }

        //先将ID分组
        $idArray = array();
        foreach ($ids as $_id) {
            $key = $_id % Article::TABLE_PARTITION;
            $idArray[$key][] = $_id;
        }

        $rs = array();
        //按组去查询数据
        foreach ($idArray as $k => $v) {
            $tmp = (new Article($k))->getListByCondition(['id' => $v, 'status' => self::ARTICLE_STATUS_NORMAL]);
            $rs = array_merge($rs, $tmp);
        }

        //按时间排序
        $rs = quickSortToArray($$rs, 'created_at', $asc);

        return $rs;
    }

    /**
     * 获取or初始化阅读数
     * @param $id
     * @param $add
     * @return int
     */
    public function getReadNumber($id, $add = true)
    {
        $redis = Yii::$app->redis;
        $nowDate = date('Ymd');
        //新一日，切换新的缓存hash
        if (!$redis->exists(self::REDIS_ARTICLE_READ_NUMBER . $nowDate)) {
            $redis->hset(self::REDIS_ARTICLE_READ_NUMBER . $nowDate, 'base_id', 0);
            $redis->expire(self::REDIS_ARTICLE_READ_NUMBER . $nowDate, self::REDIS_EXPIRE_TIME);
            Yii::warning("msg:set redis read number hash;date:{$nowDate};", CATEGORIES_WARN);
        }

        //获取今日该ID文章的缓存，若没有则去取昨日缓存（说明这个时间段没人访问这个ID）
        if (!$redis->hexists(self::REDIS_ARTICLE_READ_NUMBER . date('Ymd'), $id)) {
            $readNumber = $redis->hget(self::REDIS_ARTICLE_READ_NUMBER . date('Ymd', strtotime('yesterday')), $id);
            if (!$readNumber) {
                //缓存丢失，穿透DB
                $articleInfo = $this->getOneByCondition($id);
                $readNumber = $articleInfo['read_number'];
                Yii::warning("msg:get db read number;article_id:{$id};", CATEGORIES_WARN);
            }

            if ($add) {
                $readNumber = $readNumber + 1;
            }
            //重设缓存
            $redis->hset(self::REDIS_ARTICLE_READ_NUMBER . date('Ymd'), $id, $readNumber);
        } else {
            $readNumber = $redis->hget(self::REDIS_ARTICLE_READ_NUMBER . date('Ymd'), $id);
            if ($add) {
                $readNumber = $readNumber + 1;
            }
            $redis->hset(self::REDIS_ARTICLE_READ_NUMBER . date('Ymd'), $id, $readNumber);
        }

        return $readNumber;
    }

    /**
     * 返回文章总数 - 缓存 or DB
     * @return int
     */
    public function getArticleNumber()
    {
        $redis = Yii::$app->redis;
        $number = $redis->get(self::REDIS_ARTICLE_NUMBER);//获取文章总数，无则读DB
        if (empty($number)) {
            $number = $this->getCountByCondition([]);
        }

        return intval($number);
    }

    /**
     * 从DB中获取总表记录数
     * @param null $condition
     * @return int
     */
    public function getCountByCondition($condition)
    {
        $count = Article::TABLE_PARTITION;
        $result = 0;

        while ($count - Article::TABLE_PARTITION < Article::TABLE_PARTITION) {
            $article  = new Article($count);

            $result = $result + $article->getCountByCondition($condition);
            $count++;
        }

        return $result;
    }

    /**
     * 从所有表中获取文章记录
     * 需要当无指定条件时，每次返回数据不同
     * @param null $condition
     * @param int $limit //每个分表里取的数量
     * @param $offset
     * @return array
     */
    public function getListByCondition($condition = null, $limit = 10, $offset = 0)
    {
        $count = Article::TABLE_PARTITION;
        $result = array();

        while ($count - Article::TABLE_PARTITION < Article::TABLE_PARTITION) {
            $article = new Article($count);

            $result = array_merge($result, $article->getListByCondition($condition, $limit, $offset));
            $count++;
        }

        return $result;
    }

    /**
     * 获取符合条件的所有数据，受limit限制
     * @param $key
     * @param array $condition
     * @param int $limit
     * @return mixed
     */
    public function getAllList($key, $condition = array(), $limit = 1000)
    {
        $rs = (new Article($key))->getAllList($condition, $limit);
        return $rs;
    }

    /**
     * 查询单条文章记录，注意ID可传入UID或者article_id
     * @param $id
     * @param null $condition
     * @return mixed
     */
    public function getOneByCondition($id, $condition = null)
    {
        $index = intval($id) % Article::TABLE_PARTITION;
        $article = new Article($index);
        $data = $article->getOneByCondition($condition);
        if (!empty($data)) {
            $data['tag_msg'] = (new TagModel())->tagMap[$data['tag']];
        }

        return $data;
    }

    /**
     * 插入文章并返回文章ID
     * @param array $data
     * @return int
     */
    public function insert(array $data)
    {
        if (empty($data) || empty($data['uid'])) {
            return false;
        }

        $redisClient = Yii::$app->redis;
        $baseArticleId = $redisClient->incr(self::BASE_ARTICLE_ID_KEY);

        $articleID = $baseArticleId * Article::TABLE_PARTITION + $data['uid'] % Article::TABLE_PARTITION;
        $data['id'] = $articleID;

        $transaction = Yii::$app->db->beginTransaction();

        //插入文章数据
        if (!(new Article($data['uid']))->insertData($data)) {
            Yii::warning("insert data into article failed;uid:{$data['uid']};article_id:{$articleID}", CATEGORIES_WARN);
            $transaction->rollBack();
            return 0;
        }

        //插入索引数据
        if (!$articleIndexID = (new ArticleIndexModel())->insert($articleID)) {
            $transaction->rollBack();
            return 0;
        }

        $transaction->commit();
        Yii::info("new article data;article_id:{$articleID};article_index_id:{$articleIndexID}", CATEGORIES_INFO);
        return $articleID;
    }

    /**
     * 批量更新
     * index只能指定一个条件！
     * @param $key
     * @param $data
     * @param $index
     * @return int
     */
    public function updateBatch($key, $data, $index)
    {
        return (new Article($key))->updateBatch($data, $index);
    }
}